{"ast":null,"code":"var _jsxFileName = \"C:\\\\Devwork\\\\tutorials\\\\QandA_netcore5\\\\frontend\\\\src\\\\Pages\\\\QuestionPage.tsx\",\n    _s = $RefreshSig$();\n\n/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { gray3, gray6 } from '../CSS/Styles';\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Page } from './Page';\nimport { getQuestion } from '../Components/QuestionsData';\nimport { AnswerList } from '../Components/AnswerList';\nimport { jsxDEV as _jsxDEV } from \"@emotion/react/jsx-dev-runtime\";\nexport const QuestionPage = () => {\n  _s();\n\n  const [question, setQuestion] = React.useState(null);\n  const {\n    questionId\n  } = useParams();\n\n  const doGetQuestion = async questionId => {\n    const foundQuestion = await getQuestion(questionId);\n    setQuestion(foundQuestion);\n  };\n\n  React.useEffect(() => {\n    if (questionId) {\n      doGetQuestion(Number(questionId));\n    }\n  }, [questionId]);\n  return _jsxDEV(Page, {\n    children: _jsxDEV(\"div\", {\n      css: css`\n          background-color: white;\n          padding: 15px 20px 20px 20px;\n          border-radius: 4px;\n          border: 1px solid ${gray6};\n          box-shadow: 0 3px 5px 0 rgba(0, 0, 0, 0.16);\n        `,\n      children: [_jsxDEV(\"div\", {\n        css: css`\n            font-size: 19px;\n            font-weight: bold;\n            margin: 10px 0px 5px;\n          `,\n        children: question === null ? '' : question.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), question !== null && _jsxDEV(React.Fragment, {\n        children: [_jsxDEV(\"p\", {\n          css: css`\n                margin-top: 0px;\n                background-color: white;\n              `,\n          children: question.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, this), _jsxDEV(\"div\", {\n          css: css`\n                font-size: 12px;\n                font-style: italic;\n                color: ${gray3};\n              `,\n          children: `Asked by ${question.userName} on\n            ${question.created.toLocaleDateString()}\n            ${question.created.toLocaleTimeString()}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this), _jsxDEV(AnswerList, {\n          data: question.answers\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n\n_s(QuestionPage, \"wBayhm8QBHz4kVXPXfkXATz88m8=\", false, function () {\n  return [useParams];\n});\n\n_c = QuestionPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuestionPage\");","map":{"version":3,"sources":["C:/Devwork/tutorials/QandA_netcore5/frontend/src/Pages/QuestionPage.tsx"],"names":["css","gray3","gray6","React","useParams","Page","getQuestion","AnswerList","QuestionPage","question","setQuestion","useState","questionId","doGetQuestion","foundQuestion","useEffect","Number","title","content","userName","created","toLocaleDateString","toLocaleTimeString","answers"],"mappings":";;;AAAA;AACA,SAASA,GAAT,QAAoB,gBAApB;AACA,SAASC,KAAT,EAAgBC,KAAhB,QAA6B,eAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,SAASC,WAAT,QAA0C,6BAA1C;AACA,SAASC,UAAT,QAA2B,0BAA3B;;AAEA,OAAO,MAAMC,YAAY,GAAG,MAAM;AAAA;;AAChC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BP,KAAK,CAACQ,QAAN,CAAoC,IAApC,CAAhC;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAsBR,SAAS,EAArC;;AAEA,QAAMS,aAAa,GAAG,MAAOD,UAAP,IAA8B;AAClD,UAAME,aAAa,GAAG,MAAMR,WAAW,CAACM,UAAD,CAAvC;AACAF,IAAAA,WAAW,CAACI,aAAD,CAAX;AACD,GAHD;;AAKAX,EAAAA,KAAK,CAACY,SAAN,CAAgB,MAAM;AACpB,QAAIH,UAAJ,EAAgB;AACdC,MAAAA,aAAa,CAACG,MAAM,CAACJ,UAAD,CAAP,CAAb;AACD;AACF,GAJD,EAIG,CAACA,UAAD,CAJH;AAMA,SACE,QAAC,IAAD;AAAA,cACE;AACE,MAAA,GAAG,EAAEZ,GAAI;AACjB;AACA;AACA;AACA,8BAA8BE,KAAM;AACpC;AACA,SAPM;AAAA,iBASE;AACE,QAAA,GAAG,EAAEF,GAAI;AACnB;AACA;AACA;AACA,WALQ;AAAA,kBAOGS,QAAQ,KAAK,IAAb,GAAoB,EAApB,GAAyBA,QAAQ,CAACQ;AAPrC;AAAA;AAAA;AAAA;AAAA,cATF,EAkBGR,QAAQ,KAAK,IAAb,IACC,QAAC,KAAD,CAAO,QAAP;AAAA,mBACE;AACE,UAAA,GAAG,EAAET,GAAI;AACvB;AACA;AACA,eAJY;AAAA,oBAMGS,QAAQ,CAACS;AANZ;AAAA;AAAA;AAAA;AAAA,gBADF,EASE;AACE,UAAA,GAAG,EAAElB,GAAI;AACvB;AACA;AACA,yBAAyBC,KAAM;AAC/B,eALY;AAAA,oBAOI,YAAWQ,QAAQ,CAACU,QAAS;AAC7C,cAAcV,QAAQ,CAACW,OAAT,CAAiBC,kBAAjB,EAAsC;AACpD,cAAcZ,QAAQ,CAACW,OAAT,CAAiBE,kBAAjB,EAAsC;AATxC;AAAA;AAAA;AAAA;AAAA,gBATF,EAoBE,QAAC,UAAD;AAAY,UAAA,IAAI,EAAEb,QAAQ,CAACc;AAA3B;AAAA;AAAA;AAAA;AAAA,gBApBF;AAAA;AAAA;AAAA;AAAA;AAAA,cAnBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA+CD,CA9DM;;GAAMf,Y;UAEiBJ,S;;;KAFjBI,Y","sourcesContent":["/** @jsxImportSource @emotion/react */\r\nimport { css } from '@emotion/react';\r\nimport { gray3, gray6 } from '../CSS/Styles';\r\nimport React from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Page } from './Page';\r\nimport { getQuestion, QuestionData } from '../Components/QuestionsData';\r\nimport { AnswerList } from '../Components/AnswerList';\r\n\r\nexport const QuestionPage = () => {\r\n  const [question, setQuestion] = React.useState<QuestionData | null>(null);\r\n  const { questionId }: any = useParams();\r\n\r\n  const doGetQuestion = async (questionId: number) => {\r\n    const foundQuestion = await getQuestion(questionId);\r\n    setQuestion(foundQuestion);\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    if (questionId) {\r\n      doGetQuestion(Number(questionId));\r\n    }\r\n  }, [questionId]);\r\n\r\n  return (\r\n    <Page>\r\n      <div\r\n        css={css`\r\n          background-color: white;\r\n          padding: 15px 20px 20px 20px;\r\n          border-radius: 4px;\r\n          border: 1px solid ${gray6};\r\n          box-shadow: 0 3px 5px 0 rgba(0, 0, 0, 0.16);\r\n        `}\r\n      >\r\n        <div\r\n          css={css`\r\n            font-size: 19px;\r\n            font-weight: bold;\r\n            margin: 10px 0px 5px;\r\n          `}\r\n        >\r\n          {question === null ? '' : question.title}\r\n        </div>\r\n        {question !== null && (\r\n          <React.Fragment>\r\n            <p\r\n              css={css`\r\n                margin-top: 0px;\r\n                background-color: white;\r\n              `}\r\n            >\r\n              {question.content}\r\n            </p>\r\n            <div\r\n              css={css`\r\n                font-size: 12px;\r\n                font-style: italic;\r\n                color: ${gray3};\r\n              `}\r\n            >\r\n              {`Asked by ${question.userName} on\r\n            ${question.created.toLocaleDateString()}\r\n            ${question.created.toLocaleTimeString()}`}\r\n            </div>\r\n            <AnswerList data={question.answers} />\r\n          </React.Fragment>\r\n        )}\r\n      </div>\r\n    </Page>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}