{"ast":null,"code":"var _jsxFileName = \"C:\\\\Devwork\\\\tutorials\\\\QandA_netcore5\\\\frontend\\\\src\\\\Pages\\\\AskPage.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { postQuestion } from '../Components/QuestionsData';\nimport { FieldContainer, FieldError, FieldInput, FieldLabel, Fieldset, FieldTextArea, FormButtonContainer, PrimaryButton, SubmissionSuccess } from '../CSS/Styles';\nimport { Page } from './Page';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AskPage = () => {\n  _s();\n\n  const {\n    register,\n    formState: {\n      errors\n    },\n    handleSubmit,\n    formState\n  } = useForm({\n    mode: 'onBlur'\n  });\n  const [successfullySubmitted, setSuccessfullySubmitted] = React.useState(false);\n\n  const submitForm = async data => {\n    const result = await postQuestion({\n      title: data.title,\n      content: data.content,\n      userName: 'Fred',\n      created: new Date()\n    });\n    setSuccessfullySubmitted(result ? true : false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Page, {\n    title: \"Ask a question\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(submitForm),\n      children: /*#__PURE__*/_jsxDEV(Fieldset, {\n        disabled: formState.isSubmitting || successfullySubmitted,\n        children: [/*#__PURE__*/_jsxDEV(FieldContainer, {\n          children: [/*#__PURE__*/_jsxDEV(FieldLabel, {\n            htmlFor: \"title\",\n            children: \"Title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FieldInput, { ...register('title', {\n              required: true,\n              minLength: 10\n            }),\n            id: \"title\",\n            name: \"title\",\n            type: \"text\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 13\n          }, this), errors.title && errors.title.type === 'required' && /*#__PURE__*/_jsxDEV(FieldError, {\n            children: \"You must enter the question title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 15\n          }, this), errors.title && errors.title.type === 'minLength' && /*#__PURE__*/_jsxDEV(FieldError, {\n            children: \"The title must be at least 10 characters\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FieldContainer, {\n          children: [/*#__PURE__*/_jsxDEV(FieldLabel, {\n            htmlFor: \"content\",\n            children: \"Content\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FieldTextArea, { ...register('content', {\n              required: true,\n              minLength: 50\n            }),\n            id: \"content\",\n            name: \"content\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }, this), errors.content && errors.content.type === 'required' && /*#__PURE__*/_jsxDEV(FieldError, {\n            children: \"You must enter the question content\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 15\n          }, this), errors.content && errors.content.type === 'minLength' && /*#__PURE__*/_jsxDEV(FieldError, {\n            children: \"The content must be at least 50 characters\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormButtonContainer, {\n          children: /*#__PURE__*/_jsxDEV(PrimaryButton, {\n            type: \"submit\",\n            children: \"Submit Your Question\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this), successfullySubmitted && /*#__PURE__*/_jsxDEV(SubmissionSuccess, {\n          children: \"Your question was successfully submitted\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AskPage, \"j7KGcUXS4YMADXYPtbEf4n7PesM=\", false, function () {\n  return [useForm];\n});\n\n_c = AskPage;\nexport default AskPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"AskPage\");","map":{"version":3,"sources":["C:/Devwork/tutorials/QandA_netcore5/frontend/src/Pages/AskPage.tsx"],"names":["React","useForm","postQuestion","FieldContainer","FieldError","FieldInput","FieldLabel","Fieldset","FieldTextArea","FormButtonContainer","PrimaryButton","SubmissionSuccess","Page","AskPage","register","formState","errors","handleSubmit","mode","successfullySubmitted","setSuccessfullySubmitted","useState","submitForm","data","result","title","content","userName","created","Date","isSubmitting","required","minLength","type"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { postQuestion } from '../Components/QuestionsData';\r\nimport {\r\n  FieldContainer,\r\n  FieldError,\r\n  FieldInput,\r\n  FieldLabel,\r\n  Fieldset,\r\n  FieldTextArea,\r\n  FormButtonContainer,\r\n  PrimaryButton,\r\n  SubmissionSuccess,\r\n} from '../CSS/Styles';\r\nimport { Page } from './Page';\r\n\r\ntype FormData = {\r\n  title: string;\r\n  content: string;\r\n};\r\n\r\nexport const AskPage = () => {\r\n  const {\r\n    register,\r\n    formState: { errors },\r\n    handleSubmit,\r\n    formState,\r\n  } = useForm<FormData>({ mode: 'onBlur' });\r\n\r\n  const [successfullySubmitted, setSuccessfullySubmitted] =\r\n    React.useState(false);\r\n\r\n  const submitForm = async (data: FormData) => {\r\n    const result = await postQuestion({\r\n      title: data.title,\r\n      content: data.content,\r\n      userName: 'Fred',\r\n      created: new Date(),\r\n    });\r\n    setSuccessfullySubmitted(result ? true : false);\r\n  };\r\n\r\n  return (\r\n    <Page title=\"Ask a question\">\r\n      <form onSubmit={handleSubmit(submitForm)}>\r\n        <Fieldset disabled={formState.isSubmitting || successfullySubmitted}>\r\n          <FieldContainer>\r\n            <FieldLabel htmlFor=\"title\">Title</FieldLabel>\r\n            <FieldInput\r\n              {...register('title', { required: true, minLength: 10 })}\r\n              id=\"title\"\r\n              name=\"title\"\r\n              type=\"text\"\r\n            ></FieldInput>\r\n            {errors.title && errors.title.type === 'required' && (\r\n              <FieldError>You must enter the question title</FieldError>\r\n            )}\r\n            {errors.title && errors.title.type === 'minLength' && (\r\n              <FieldError>The title must be at least 10 characters</FieldError>\r\n            )}\r\n          </FieldContainer>\r\n          <FieldContainer>\r\n            <FieldLabel htmlFor=\"content\">Content</FieldLabel>\r\n            <FieldTextArea\r\n              {...register('content', { required: true, minLength: 50 })}\r\n              id=\"content\"\r\n              name=\"content\"\r\n            />\r\n            {errors.content && errors.content.type === 'required' && (\r\n              <FieldError>You must enter the question content</FieldError>\r\n            )}\r\n            {errors.content && errors.content.type === 'minLength' && (\r\n              <FieldError>\r\n                The content must be at least 50 characters\r\n              </FieldError>\r\n            )}\r\n          </FieldContainer>\r\n          <FormButtonContainer>\r\n            <PrimaryButton type=\"submit\">Submit Your Question</PrimaryButton>\r\n          </FormButtonContainer>\r\n          {successfullySubmitted && (\r\n            <SubmissionSuccess>\r\n              Your question was successfully submitted\r\n            </SubmissionSuccess>\r\n          )}\r\n        </Fieldset>\r\n      </form>\r\n    </Page>\r\n  );\r\n};\r\n\r\nexport default AskPage;\r\n"]},"metadata":{},"sourceType":"module"}